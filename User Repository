package yg.bootcamp.demo.controller;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

import java.util.Optional;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;

import yg.bootcamp.demo.config.JwtUtil;
import yg.bootcamp.demo.dto.LoginDTO;
import yg.bootcamp.demo.dto.LoginResponseDTO;
import yg.bootcamp.demo.dto.UserDTO;
import yg.bootcamp.demo.entity.User;
import yg.bootcamp.demo.repository.UserRepository;
import yg.bootcamp.demo.service.ExpenseService;
import yg.bootcamp.demo.service.UserService;

class UserControllerTest {

    @InjectMocks
    private UserController userController;

    @Mock
    private UserService userService;

    @Mock
    private UserRepository userRepository;

    @Mock
    private JwtUtil jwtUtil;

    @Mock
    private ExpenseService expenseService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    void testGetUserById() {
        // Arrange
        int userId = 1;
        UserDTO mockUserDTO = new UserDTO(1, "John Doe", "john@example.com", "password");
        when(userService.getUserById(userId)).thenReturn(mockUserDTO);

        // Act
        UserDTO userDTO = userController.getUserById(userId);

        // Assert
        assertNotNull(userDTO);
        assertEquals("John Doe", userDTO.getUsername());
        verify(userService, times(1)).getUserById(userId);
    }

    @Test
    void testGetUserByEmail() {
        // Arrange
        String email = "john@example.com";
        UserDTO mockUserDTO = new UserDTO(1, "John Doe", email, "password");
        when(userService.getUserByEmail(email)).thenReturn(mockUserDTO);

        // Act
        UserDTO userDTO = userController.getUserByEmail(email);

        // Assert
        assertNotNull(userDTO);
        assertEquals(email, userDTO.getEmail());
        verify(userService, times(1)).getUserByEmail(email);
    }

    @Test
    void testCreateUser() {
        // Arrange
        UserDTO userDTO = new UserDTO(1, "John Doe", "john@example.com", "password");
        when(userService.createUser(any(UserDTO.class))).thenReturn(userDTO);

        // Act
        UserDTO createdUser = userController.createUser(userDTO);

        // Assert
        assertNotNull(createdUser);
        assertEquals("John Doe", createdUser.getUsername());
        verify(userService, times(1)).createUser(any(UserDTO.class));
    }

    @Test
    void testLogin_Success() {
        // Arrange
        LoginDTO loginDTO = new LoginDTO("john@example.com", "password");
        User mockUser = new User(1, "John Doe", "john@example.com", "password");
        when(userRepository.findByEmail(loginDTO.getEmail())).thenReturn(Optional.of(mockUser));
        when(jwtUtil.generateToken(mockUser.getUsername())).thenReturn("fake-jwt-token");

        // Act
        ResponseEntity<?> response = userController.login(loginDTO);

        // Assert
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertTrue(response.getBody() instanceof LoginResponseDTO);
        LoginResponseDTO responseDTO = (LoginResponseDTO) response.getBody();
        assertEquals("fake-jwt-token", responseDTO.getToken());
        verify(userRepository, times(1)).findByEmail(loginDTO.getEmail());
        verify(jwtUtil, times(1)).generateToken(mockUser.getUsername());
    }

    @Test
    void testLogin_Failure_InvalidCredentials() {
        // Arrange
        LoginDTO loginDTO = new LoginDTO("john@example.com", "wrong-password");
        User mockUser = new User(1, "John Doe", "john@example.com", "password");
        when(userRepository.findByEmail(loginDTO.getEmail())).thenReturn(Optional.of(mockUser));

        // Act
        ResponseEntity<?> response = userController.login(loginDTO);

        // Assert
        assertEquals(HttpStatus.UNAUTHORIZED, response.getStatusCode());
        assertEquals("Invalid credentials", response.getBody());
        verify(userRepository, times(1)).findByEmail(loginDTO.getEmail());
    }

    @Test
    void testDeleteUser() {
        // Arrange
        int userId = 1;
        doNothing().when(userService).deleteUser(userId);

        // Act
        userController.deleteUser(userId);

        // Assert
        verify(userService, times(1)).deleteUser(userId);
    }

    private boolean passwordMatches(String rawPassword, String storedPassword) {
        return rawPassword.equals(storedPassword);
    }
}
