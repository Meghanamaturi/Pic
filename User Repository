import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import jakarta.persistence.EntityNotFoundException;
import yg.bootcamp.demo.repository.IncomeRepository;
import yg.bootcamp.demo.repository.UserRepository;
import yg.bootcamp.demo.dto.IncomeDTO;
import yg.bootcamp.demo.entity.Income;
import yg.bootcamp.demo.entity.User;

@Service
public class IncomeService {

    @Autowired
    IncomeRepository repository;

    @Autowired
    UserRepository userRepository;

    // Get all incomes
    public Iterable<Income> getIncomes() {
        return repository.findAll();
    }

    // Get all incomes sorted by creation date, in reverse order
    public List<Income> getAllIncomes() {
        return StreamSupport.stream(repository.findAll().spliterator(), false)
                .sorted(Comparator.comparing(Income::getCreatedDate).reversed())
                .collect(Collectors.toList());
    }

    // Create or post income by userId
    public Income postOrCreateIncome(IncomeDTO incomeDTO) {
        Optional<User> userOptional = userRepository.findById(incomeDTO.getUserId());
        if (userOptional.isPresent()) {
            return saveOrUpdateIncome(new Income(), incomeDTO, userOptional.get());
        } else {
            throw new EntityNotFoundException("User not found with id: " + incomeDTO.getUserId());
        }
    }

    // Save or update income by linking to a user
    public Income saveOrUpdateIncome(Income income, IncomeDTO incomeDTO, User user) {
        income.setIncomeName(incomeDTO.getIncomeName());
        income.setCreatedDate(incomeDTO.getCreatedDate());
        income.setDescription(incomeDTO.getDescription());
        income.setAmount(incomeDTO.getAmount());
        income.setCategory(incomeDTO.getCategory());
        income.setUser(user); // Link income to the user
        return repository.save(income);
    }

    // Get income by ID
    public Income getIncomeById(Integer id) {
        Optional<Income> optionalIncome = repository.findById(id);
        if (optionalIncome.isPresent()) {
            return optionalIncome.get();
        } else {
            throw new EntityNotFoundException("Income not found with id: " + id);
        }
    }

    // Update income by ID
    public Income updateIncome(Integer id, IncomeDTO incomeDTO) {
        Optional<Income> optionalIncome = repository.findById(id);
        if (optionalIncome.isPresent()) {
            Optional<User> userOptional = userRepository.findById(incomeDTO.getUserId());
            if (userOptional.isPresent()) {
                return saveOrUpdateIncome(optionalIncome.get(), incomeDTO, userOptional.get());
            } else {
                throw new EntityNotFoundException("User not found with id: " + incomeDTO.getUserId());
            }
        } else {
            throw new EntityNotFoundException("Income not found with id: " + id);
        }
    }

    // Delete income by ID
    public void deleteIncome(Integer id) {
        Optional<Income> optionalIncome = repository.findById(id);
        if (optionalIncome.isPresent()) {
            repository.deleteById(id);
        } else {
            throw new EntityNotFoundException("Income not found with id: " + id);
        }
    }
}
