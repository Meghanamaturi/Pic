import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import jakarta.persistence.EntityNotFoundException;
import yg.bootcamp.demo.dto.ExpenseDTO;
import yg.bootcamp.demo.entity.Expense;
import yg.bootcamp.demo.service.ExpenseService;

@RestController
@CrossOrigin
public class ExpenseController {

    @Autowired // Dependency Injection
    private ExpenseService service;

    @GetMapping("/expenses")
    public Iterable<Expense> getExpenses() {
        return service.getExpenses();
    }

    @GetMapping("/expenses/user/{userId}")
    public ResponseEntity<?> getExpensesByUserId(@PathVariable Long userId) {
        return ResponseEntity.ok(service.getExpensesByUserId(userId));
    }

    @PostMapping("/createexpense")
    public ResponseEntity<?> postOrCreateExpense(@RequestBody ExpenseDTO dto) {
        Expense createdExpense = service.postOrCreateExpense(dto);
        if (createdExpense != null) {
            return ResponseEntity.status(HttpStatus.CREATED).body(createdExpense);
        } else {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
        }
    }

    @GetMapping("/all")
    public ResponseEntity<?> getAllExpenses() {
        return ResponseEntity.ok(service.getAllExpenses());
    }

    @GetMapping("/expense/{id}")
    public ResponseEntity<?> getExpenseById(@PathVariable Integer id) {
        try {
            return ResponseEntity.ok(service.getExpenseById(id));
        } catch (EntityNotFoundException ex) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(ex.getMessage());
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Something went wrong");
        }
    }

    @PutMapping("/expense/{id}")
    public ResponseEntity<?> updateExpense(@PathVariable Integer id, @RequestBody ExpenseDTO dto) {
        try {
            return ResponseEntity.ok(service.updateExpense(id, dto));
        } catch (EntityNotFoundException ex) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(ex.getMessage());
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Something went wrong");
        }
    }

    @DeleteMapping("/expense/{id}")
    public ResponseEntity<?> deleteExpense(@PathVariable Integer id) {
        try {
            service.deleteExpense(id);
            return ResponseEntity.ok(null);
        } catch (EntityNotFoundException ex) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(ex.getMessage());
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Something went wrong");
        }
    }
}
