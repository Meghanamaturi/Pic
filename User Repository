package yg.bootcamp.demo.controller;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import yg.bootcamp.demo.dto.GraphDTO;
import yg.bootcamp.demo.service.StatsService;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.*;

class StatsControllerTest {

    @InjectMocks
    private StatsController statsController;

    @Mock
    private StatsService statsService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    void testGetChartDetails_Success() {
        // Arrange
        GraphDTO mockGraphDTO = new GraphDTO();
        when(statsService.getChartData(1)).thenReturn(mockGraphDTO);

        // Act
        ResponseEntity<GraphDTO> response = statsController.getChartDetails(1);

        // Assert
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(mockGraphDTO, response.getBody());
        verify(statsService, times(1)).getChartData(1);
    }

    @Test
    void testGetChartDetails_Failure() {
        // Arrange
        when(statsService.getChartData(1)).thenReturn(null);

        // Act
        ResponseEntity<GraphDTO> response = statsController.getChartDetails(1);

        // Assert
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(null, response.getBody());
        verify(statsService, times(1)).getChartData(1);
    }

    @Test
    void testGetStats_Success() {
        // Arrange
        Object mockStats = new Object();  // Replace with actual stats DTO object if defined
        when(statsService.getStats(1)).thenReturn(mockStats);

        // Act
        ResponseEntity<?> response = statsController.getStats(1);

        // Assert
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(mockStats, response.getBody());
        verify(statsService, times(1)).getStats(1);
    }

    @Test
    void testGetStats_Failure() {
        // Arrange
        when(statsService.getStats(1)).thenReturn(null);

        // Act
        ResponseEntity<?> response = statsController.getStats(1);

        // Assert
        assertEquals(HttpStatus.OK, response.getStatusCode());
        assertEquals(null, response.getBody());
        verify(statsService, times(1)).getStats(1);
    }
}
