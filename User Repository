package yg.bootcamp.demo.service;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

import java.util.*;

import jakarta.persistence.EntityNotFoundException;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import yg.bootcamp.demo.dto.BudgetDto;
import yg.bootcamp.demo.entity.Budget;
import yg.bootcamp.demo.entity.Expense;
import yg.bootcamp.demo.entity.User;
import yg.bootcamp.demo.repository.BudgetRepository;
import yg.bootcamp.demo.repository.ExpenseRepository;
import yg.bootcamp.demo.repository.UserRepository;

class BudgetServiceTest {

    @InjectMocks
    private BudgetService budgetService;

    @Mock
    private BudgetRepository budgetRepository;

    @Mock
    private ExpenseRepository expenseRepository;

    @Mock
    private UserRepository userRepository;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    void testPostOrCreateBudget_Success() {
        // Arrange
        BudgetDto budgetDto = new BudgetDto();
        budgetDto.setAmount(1000.0);
        User user = new User();
        user.setId(1);
        Optional<User> userOptional = Optional.of(user);

        when(userRepository.findById(1)).thenReturn(userOptional);
        when(budgetRepository.save(any(Budget.class))).thenReturn(new Budget());

        // Act
        Budget result = budgetService.postorCreateBudget(budgetDto, 1);

        // Assert
        assertNotNull(result);
        verify(budgetRepository, times(1)).save(any(Budget.class));
    }

    @Test
    void testPostOrCreateBudget_UserNotFound() {
        // Arrange
        BudgetDto budgetDto = new BudgetDto();
        when(userRepository.findById(1)).thenReturn(Optional.empty());

        // Act & Assert
        assertThrows(EntityNotFoundException.class, () -> {
            budgetService.postorCreateBudget(budgetDto, 1);
        });
    }

    @Test
    void testGetBudgetsByUserId() {
        // Arrange
        int userId = 1;
        List<Budget> mockBudgets = new ArrayList<>();
        when(budgetRepository.findByUserId(userId)).thenReturn(mockBudgets);

        // Act
        List<Budget> result = budgetService.getBudgetsByUserId(userId);

        // Assert
        assertNotNull(result);
        verify(budgetRepository, times(1)).findByUserId(userId);
    }

    @Test
    void testGetBudgetById_Success() {
        // Arrange
        Budget budget = new Budget();
        Optional<Budget> optionalBudget = Optional.of(budget);
        when(budgetRepository.findById(1)).thenReturn(optionalBudget);

        // Act
        Optional<Budget> result = budgetService.getBudgetById(1);

        // Assert
        assertTrue(result.isPresent());
        verify(budgetRepository, times(1)).findById(1);
    }

    @Test
    void testGetBudgetAmountById_Success() {
        // Arrange
        Budget budget = new Budget();
        budget.setAmount(500.0);
        Optional<Budget> optionalBudget = Optional.of(budget);
        when(budgetRepository.findById(1)).thenReturn(optionalBudget);

        // Act
        double result = budgetService.getBudgetAmountById(1);

        // Assert
        assertEquals(500.0, result);
        verify(budgetRepository, times(1)).findById(1);
    }

    @Test
    void testGetBudgetAmountById_BudgetNotFound() {
        // Arrange
        when(budgetRepository.findById(1)).thenReturn(Optional.empty());

        // Act & Assert
        assertThrows(NoSuchElementException.class, () -> {
            budgetService.getBudgetAmountById(1);
        });
    }

    @Test
    void testCheckBudget_Success() {
        // Arrange
        Budget budget = new Budget();
        budget.setStartDate(new Date());
        budget.setEndDate(new Date());
        Optional<Budget> optionalBudget = Optional.of(budget);

        User user = new User();
        Optional<User> userOptional = Optional.of(user);

        List<Expense> mockExpenses = new ArrayList<>();
        when(budgetRepository.findById(1)).thenReturn(optionalBudget);
        when(userRepository.findById(1)).thenReturn(userOptional);
        when(expenseRepository.findByCreatedDateBetweenAndUserId(any(Date.class), any(Date.class), anyInt()))
                .thenReturn(mockExpenses);

        // Act
        List<Expense> result = budgetService.checkBudget(1, 1);

        // Assert
        assertNotNull(result);
        verify(expenseRepository, times(1)).findByCreatedDateBetweenAndUserId(any(Date.class), any(Date.class), anyInt());
    }

    @Test
    void testDeleteBudget_Success() {
        // Arrange
        Budget budget = new Budget();
        Optional<Budget> optionalBudget = Optional.of(budget);

        when(budgetRepository.findById(1)).thenReturn(optionalBudget);
        doNothing().when(budgetRepository).deleteById(1);

        // Act
        boolean result = budgetService.deleteBudget(1);

        // Assert
        assertTrue(result);
        verify(budgetRepository, times(1)).deleteById(1);
    }

    @Test
    void testDeleteBudget_BudgetNotFound() {
        // Arrange
        when(budgetRepository.findById(1)).thenReturn(Optional.empty());

        // Act & Assert
        assertThrows(EntityNotFoundException.class, () -> {
            budgetService.deleteBudget(1);
        });
    }
}
