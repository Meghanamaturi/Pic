import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import jakarta.persistence.EntityNotFoundException;

import yg.bootcamp.demo.dto.IncomeDTO;
import yg.bootcamp.demo.entity.Income;
import yg.bootcamp.demo.service.IncomeService;

@RestController
@CrossOrigin
public class IncomeController {

    @Autowired // Dependency Injection
    IncomeService service;

    // Get all incomes
    @GetMapping("/incomes")
    public Iterable<Income> getIncomes() {
        return service.getIncomes();
    }

    // Create income based on userId from IncomeDTO
    @PostMapping("/createincome")
    public ResponseEntity<?> postOrCreateIncome(@RequestBody IncomeDTO dto) {
        try {
            Income createdIncome = service.postOrCreateIncome(dto);
            return ResponseEntity.status(HttpStatus.CREATED).body(createdIncome);
        } catch (EntityNotFoundException ex) {
            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(ex.getMessage());
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Something went wrong");
        }
    }

    // Get all incomes sorted by creation date in reverse order
    @GetMapping("/allincomes")
    public ResponseEntity<?> getAllIncomes() {
        return ResponseEntity.ok(service.getAllIncomes());
    }

    // Get income by ID
    @GetMapping("/income/{id}")
    public ResponseEntity<?> getIncomeById(@PathVariable Integer id) {
        try {
            return ResponseEntity.ok(service.getIncomeById(id));
        } catch (EntityNotFoundException ex) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(ex.getMessage());
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Something went wrong");
        }
    }

    // Update income by ID and userId
    @PutMapping("/income/{id}")
    public ResponseEntity<?> updateIncome(@PathVariable Integer id, @RequestBody IncomeDTO dto) {
        try {
            return ResponseEntity.ok(service.updateIncome(id, dto));
        } catch (EntityNotFoundException ex) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(ex.getMessage());
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Something went wrong");
        }
    }

    // Delete income by ID
    @DeleteMapping("/income/{id}")
    public ResponseEntity<?> deleteIncome(@PathVariable Integer id) {
        try {
            service.deleteIncome(id);
            return ResponseEntity.ok(null);
        } catch (EntityNotFoundException ex) {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(ex.getMessage());
        } catch (Exception e) {
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Something went wrong");
        }
    }
}
